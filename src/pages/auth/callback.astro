---
import AuthLayout from "@/layouts/AuthLayout.astro";

export const prerender = false;

// Extract token parameters from URL
const token_hash = Astro.url.searchParams.get("token_hash");
const type = Astro.url.searchParams.get("type");
const error = Astro.url.searchParams.get("error");
const error_description = Astro.url.searchParams.get("error_description");

// Determine the callback type and status
let status: "processing" | "success" | "error" = "processing";
let message = "";
let redirectUrl = "/auth/login";

if (error) {
  status = "error";
  message = error_description || "An error occurred during authentication";
} else if (type === "signup") {
  // Supabase handles email verification automatically via the token
  // When user clicks the link, they're automatically verified
  status = "success";
  message = "Email verification successful! You can now sign in.";
  redirectUrl = "/auth/login";
} else if (type === "recovery") {
  // Password recovery - redirect to reset password form with token
  status = "success";
  message = "Password reset link verified. Please set your new password.";
  redirectUrl = `/auth/reset-password?token=${token_hash}&type=recovery`;
} else if (token_hash && type) {
  // Generic token processing - Supabase will handle it
  status = "processing";
  message = "Processing your request...";

  // Exchange the token for a session via Supabase
  // This happens automatically when the user clicks the magic link
  // Redirect will happen via JavaScript after token exchange
} else {
  status = "error";
  message = "Invalid or missing authentication parameters";
}
---

<AuthLayout title="Authentication - Initiative Forge">
  <div class="space-y-6">
    {
      status === "processing" && (
        <div class="text-center space-y-4">
          <div class="flex justify-center">
            <svg
              class="animate-spin h-12 w-12 text-blue-400"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" />
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              />
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-slate-100">Processing...</h2>
          <p class="text-slate-400">{message}</p>
        </div>
      )
    }

    {
      status === "success" && (
        <div class="space-y-4">
          <div class="rounded-lg bg-green-950/30 border border-green-800 p-4">
            <div class="flex items-start gap-3">
              <svg
                class="h-5 w-5 text-green-400 mt-0.5"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
                  clip-rule="evenodd"
                />
              </svg>
              <div>
                <h3 class="font-semibold text-green-300">Success!</h3>
                <p class="text-sm text-green-200 mt-1">{message}</p>
              </div>
            </div>
          </div>

          <a
            href={redirectUrl}
            class="inline-flex w-full items-center justify-center gap-2 rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-xs hover:bg-blue-700 transition-colors"
          >
            Continue
          </a>
        </div>
      )
    }

    {
      status === "error" && (
        <div class="space-y-4">
          <div class="rounded-lg bg-red-950/30 border border-red-800 p-4">
            <div class="flex items-start gap-3">
              <svg
                class="h-5 w-5 text-red-400 mt-0.5"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z"
                  clip-rule="evenodd"
                />
              </svg>
              <div>
                <h3 class="font-semibold text-red-300">Authentication Error</h3>
                <p class="text-sm text-red-200 mt-1">{message}</p>
              </div>
            </div>
          </div>

          <a
            href="/auth/login"
            class="inline-flex w-full items-center justify-center gap-2 rounded-md bg-slate-700 px-4 py-2 text-sm font-medium text-white shadow-xs hover:bg-slate-600 transition-colors"
          >
            Back to login
          </a>
        </div>
      )
    }
  </div>

  <p class="mt-6 text-center text-sm text-slate-400">
    Need help?{" "}
    <a
      href="mailto:support@initiativeforge.com"
      class="font-semibold text-blue-400 hover:text-blue-300 transition-colors"
    >
      Contact support
    </a>
  </p>
</AuthLayout>

<script>
  // Auto-redirect after successful verification (client-side)
  const urlParams = new URLSearchParams(window.location.search);
  const type = urlParams.get("type");
  const error = urlParams.get("error");

  if (!error && type === "signup") {
    // Redirect to login after 3 seconds for email verification
    setTimeout(() => {
      window.location.href = "/auth/login";
    }, 3000);
  } else if (!error && type === "recovery") {
    // Redirect to password reset form after 2 seconds
    const token = urlParams.get("token_hash");
    setTimeout(() => {
      window.location.href = `/auth/reset-password?token=${token}&type=recovery`;
    }, 2000);
  }
</script>
