---
import MainLayout from "@/layouts/MainLayout.astro";
import { CampaignDashboardWrapper } from "@/components/campaign-dashboard/CampaignDashboardWrapper";
import { dehydrate } from "@tanstack/react-query";
import { getQueryClient } from "@/lib/queryClient";
import type { CampaignDTO, ListPlayerCharactersResponseDTO } from "@/types";

export const prerender = false;

// Get campaign ID from URL params
const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/campaigns");
}

// Create QueryClient for this request
const queryClient = getQueryClient();

// Fetch campaign data
let campaign: CampaignDTO | null = null;
let charactersCount = 0;
let notFound = false;
let error: string | null = null;

try {
  // Prefetch campaign data using React Query
  await queryClient.prefetchQuery({
    queryKey: ["campaign", id],
    queryFn: async (): Promise<CampaignDTO> => {
      const response = await fetch(`${Astro.url.origin}/api/campaigns/${id}`, {
        headers: {
          Cookie: Astro.request.headers.get("Cookie") || "",
        },
      });

      if (response.status === 404) {
        throw new Error("Campaign not found");
      } else if (response.status === 401) {
        throw new Error("Unauthorized");
      } else if (!response.ok) {
        throw new Error("Failed to load campaign");
      }

      return await response.json();
    },
  });

  // Get the prefetched campaign data
  campaign = queryClient.getQueryData(["campaign", id]) || null;

  if (campaign) {
    // Prefetch characters data using React Query
    await queryClient.prefetchQuery({
      queryKey: ["campaign", id, "characters"],
      queryFn: async (): Promise<CampaignDTO[]> => {
        const response = await fetch(`${Astro.url.origin}/api/campaigns/${id}/characters`, {
          headers: {
            Cookie: Astro.request.headers.get("Cookie") || "",
          },
        });

        if (response.status === 404) {
          return [];
        }

        if (!response.ok) {
          throw new Error("Failed to load characters");
        }

        const data: ListPlayerCharactersResponseDTO = await response.json();
        return data.characters;
      },
    });

    // Get the prefetched characters for initial count
    const characters: any[] = queryClient.getQueryData(["campaign", id, "characters"]) || [];
    charactersCount = characters.length;
  }
} catch (err) {
  const errorMessage = err instanceof Error ? err.message : "Unknown error";

  if (errorMessage === "Campaign not found") {
    notFound = true;
  } else if (errorMessage === "Unauthorized") {
    return Astro.redirect("/login");
  } else {
    error = "Failed to load campaign";
  }

  console.error("Error fetching campaign data:", err);
}

// Dehydrate the state to pass to the client
const dehydratedState = dehydrate(queryClient);
queryClient.clear(); // Clean up server-side cache

const pageTitle = campaign ? campaign.name : "Campaign Not Found";
---

<MainLayout title={pageTitle}>
  {
    notFound || !campaign ? (
      <div class="container mx-auto px-4 py-8 max-w-7xl">
        <div class="text-center py-12">
          <h1 class="text-3xl font-bold mb-2">Campaign not found</h1>
          <p class="text-muted-foreground mb-6">This campaign doesn't exist or you don't have access to it.</p>
          <a
            href="/campaigns"
            class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
          >
            Back to My Campaigns
          </a>
        </div>
      </div>
    ) : error ? (
      <div class="container mx-auto px-4 py-8 max-w-7xl">
        <div class="text-center py-12">
          <h1 class="text-3xl font-bold mb-2">Error</h1>
          <p class="text-muted-foreground mb-6">{error}</p>
          <a
            href="/campaigns"
            class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
          >
            Back to My Campaigns
          </a>
        </div>
      </div>
    ) : (
      <CampaignDashboardWrapper
        client:load
        initialCampaign={campaign}
        initialCharactersCount={charactersCount}
        dehydratedState={dehydratedState}
      />
    )
  }
</MainLayout>
