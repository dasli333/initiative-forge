---
import MainLayout from "@/layouts/MainLayout.astro";
import { CampaignsWrapper } from "@/components/campaigns/CampaignsWrapper";
import { QueryClient, dehydrate } from "@tanstack/react-query";
import type { ListCampaignsResponseDTO } from "@/types";
import type { CampaignViewModel } from "@/types/campaigns.ts";

export const prerender = false;

// Create a new QueryClient for this request (server-side)
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 60 * 1000,
      gcTime: 5 * 60 * 1000,
    },
  },
});

// Prefetch campaigns data on the server
await queryClient.prefetchQuery({
  queryKey: ["campaigns"],
  queryFn: async (): Promise<CampaignViewModel[]> => {
    const response = await fetch(`${Astro.url.origin}/api/campaigns?limit=100&offset=0`, {
      headers: {
        Cookie: Astro.request.headers.get("Cookie") || "",
      },
    });

    if (!response.ok) {
      throw new Error("Failed to fetch campaigns");
    }

    const data: ListCampaignsResponseDTO = await response.json();

    // Convert to CampaignViewModel
    const viewModels: CampaignViewModel[] = data.campaigns.map((campaign) => ({
      ...campaign,
      characterCount: 0,
      combatCount: 0,
      hasActiveCombat: false,
    }));

    return viewModels;
  },
});

// Dehydrate the state to pass to the client
const dehydratedState = dehydrate(queryClient);
---

<MainLayout title="My Campaigns">
  <CampaignsWrapper client:load dehydratedState={dehydratedState} />
</MainLayout>
